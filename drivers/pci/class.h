#ifndef PCI_CLASS_H_
#define PCI_CLASS_H_

enum PciClass
{
    UNCLASSIFIED = 0x00,
    STORAGE = 0x01,
    NETWORK = 0x02,
    DISPLAY = 0x03,
    MULTIMEDIA = 0x04,
    MEMORY = 0x05,
    BRIDGE = 0x06,
    SIMPLE_COMM = 0x07,
    SYSTEM_PERIPH = 0x08,
    INPUT_DEVICE = 0x09,
    DOCKING_STATION = 0x0A,
    PROCESSOR = 0x0B,
    SERIAL_BUS = 0x0C,
    WIRELESS = 0x0D,
    INTELLIGENT = 0x0E,
    SATELLITE_COMM = 0x0F,
    ENCRYPTION = 0x10,
    SIGNAL_PROCESSING = 0x11,
    UNASSIGNED = 0xFF,
};

enum PciSubclass
{
    STORAGE_SCSI = 0x00,
    STORAGE_IDE = 0x01,
    STORAGE_FLOPPY = 0x02,
    STORAGE_IPI = 0x03,
    STORAGE_RAID = 0x04,
    STORAGE_ATA = 0x05,
    STORAGE_SATA = 0x06,
    STORAGE_SAS = 0x07,
    STORAGE_NVME = 0x08,
    STORAGE_OTHER = 0x80,

    NETWORK_ETHERNET = 0x00,
    NETWORK_TOKEN_RING = 0x01,
    NETWORK_FDDI = 0x02,
    NETWORK_ATM = 0x03,
    NETWORK_ISDN = 0x04,
    NETWORK_OTHER = 0x80,

    DISPLAY_VGA_8514 = 0x00,
    DISPLAY_XGA = 0x01,
    DISPLAY_3D = 0x02,
    DISPLAY_OTHER = 0x80,

    MULTIMEDIA_VIDEO = 0x00,
    MULTIMEDIA_AUDIO = 0x01,
    MULTIMEDIA_TELEPHONE = 0x02,
    MULTIMEDIA_OTHER = 0x80,

    MEMORY_RAM = 0x00,
    MEMORY_FLASH = 0x01,
    MEMORY_OTHER = 0x80,

    BRIDGE_HOST = 0x00,
    BRIDGE_ISA = 0x01,
    BRIDGE_EISA = 0x02,
    BRIDGE_MCA = 0x03,
    BRIDGE_PCI = 0x04,
    BRIDGE_PCMCIA = 0x05,
    BRIDGE_NUBUS = 0x06,
    BRIDGE_CARBUS = 0x07,
    BRIDGE_RACEWAY = 0x08,
    BRIDGE_PCI_2 = 0x09,
    BRIDGE_OTHER = 0x80,

    SIMPLE_COMM_SERIAL = 0x00,
    SIMPLE_COMM_PARALLEL = 0x01,
    SIMPLE_COMM_MULTIPORT_SERIAL = 0x02,
    SIMPLE_COMM_MODEM = 0x03,
    SIMPLE_COMM_OTHER = 0x80,

    SYSTEM_PERIPH_PIC = 0x00,
    SYSTEM_PERIPH_DMA = 0x01,
    SYSTEM_PERIPH_PIT = 0x02,
    SYSTEM_PERIPH_RTC = 0x03,
    SYSTEM_PERIPH_PCI_HOTPLUG = 0x04,
    SYSTEM_PERIPH_OTHER = 0x80,

    INPUT_DEVICE_KEYBOARD = 0x00,
    INPUT_DEVICE_PEN = 0x01,
    INPUT_DEVICE_MOUSE = 0x02,
    INPUT_DEVICE_SCANNER = 0x03,
    INPUT_DEVICE_GAMEPORT = 0x04,
    INPUT_DEVICE_OTHER = 0x80,

    DOCKING_STATION_GENERIC = 0x00,
    DOCKING_STATION_OTHER = 0x80,

    PROCESSOR_386 = 0x00,
    PROCESSOR_486 = 0x01,
    PROCESSOR_PENTIUM = 0x02,
    PROCESSOR_ALPHA = 0x10,
    PROCESSOR_POWERPC = 0x20,
    PROCESSOR_MIPS = 0x30,
    PROCESSOR_COPROCESSOR = 0x40,

    SERIAL_BUS_1394 = 0x00,
    SERIAL_BUS_ACCESS = 0x01,
    SERIAL_BUS_SSA = 0x02,
    SERIAL_BUS_USB = 0x03,
    SERIAL_BUS_FIBRE = 0x04,
    SERIAL_BUS_SMBUS = 0x05,

    WIRELESS_IRDA = 0x00,
    WIRELESS_IR = 0x01,
    WIRELESS_RF = 0x10,
    WIRELESS_OTHER = 0x80,

    INTELLIGENT_IO = 0x00,
    
    SATELLITE_COMM_TV = 0x01,
    SATELLITE_COMM_AUDIO = 0x02,
    SATELLITE_COMM_VOICE = 0x03,
    SATELLITE_COMM_DATA = 0x04,

    ENCRYPTION_NETWORK = 0x00,
    ENCRYPTION_ENTERTAINMENT = 0x10,
    ENCRYPTION_OTHER = 0x80,

    SIGNAL_PROCESSING_DPIO = 0x00,
    SIGNAL_PROCESSING_OTHER = 0x80,
};

/**
 * @brief Get generic PCI device name for given class and subclass
 * @param class Device class
 * @param subclass Device subclass
 * @return Pointer to name in name table or NULL if no generic name available
*/
char *PciGetGenericDeviceName(enum PciClass class, enum PciSubclass subclass);

#endif